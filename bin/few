#!/usr/bin/env ruby
require 'pathname'
require 'tempfile'
require 'cgi'
require 'kconv'
require 'singleton'
require 'base64'

def open_browser(url)
  case RUBY_PLATFORM.downcase
  when /linux/
    if ENV['KDE_FULL_SESSION'] == 'true'
      system 'kfmclient', 'exec', url
    elsif ENV['GNOME_DESKTOP_SESSION_ID']
      system 'gnome-open', url
    elsif system("exo-open -v >& /dev/null")
      system 'exo-open', url
    else
      system 'firefox', url
    end
  when /darwin/
    system 'open', url
  when /mswin(?!ce)|mingw|bccwin/
    system 'start', url
  else
    system 'firefox', url
  end
end

def require_monad(*libraries)
  libraries.all? {|l|
    l = l.to_s
    begin
      if File.basename(l).include? '.'
        load l
      else
        require l
      end
    rescue LoadError
    end
  }
end

require_monad :rubygems, :markdown


class Few
  class Config
    def initialize(i)
      @c = i
    end

    def method_missing(n, *a)
      case n.to_s
      when /=$/
        @c[n.to_s.gsub(/=$/, '').to_sym] = a[0]
      else
        @c[n]
      end
    end
  end

  class RemoteHelper
    def initialize(o = {})
      require 'net/http'
      require 'openssl'
      require 'uri'
      require 'cgi'
      @opt = {
        :private_key => nil, :public_key => nil, :remote_path => nil
      }.merge(o)
      @priv_key = @opt[:private_key] ?
        OpenSSL::PKey::RSA.new(@opt[:private_key]) : nil
      @publ_key = @opt[:public_key ] ?
        OpenSSL::PKey::RSA.new(@opt[:public_key ]) : nil
      @remote_path = @opt[:remote_path] ?
        URI.parse(@opt[:remote_path]) : nil
    end

    def generate_key_pair
      rsa                = OpenSSL::PKey::RSA.generate(2048)
      @opt[:private_key] = rsa.export
      @opt[:public_key ] = rsa.public_key.to_s
      @priv_key          = rsa
      @publ_key          = OpenSSL::PKey::RSA.new(rsa.public_key)
      self
    end

    def private_key;     @opt[:private_key]; end
    def public_key;      @opt[:public_key ]; end
    def remote_path;     @opt[:remote_path]; end
    def private_key=(x); @opt[:private_key]; @priv_key    = OpenSSL::PKey::RSA.new(@opt[:private_key]); x; end
    def public_key=(x);  @opt[:public_key ]; @publ_key    = OpenSSL::PKey::RSA.new(@opt[:public_key ]); x; end
    def remote_path=(x); @opt[:remote_path]; @remote_path = URI.parse(@opt[:remote_path             ]); x; end

    def crypt(str)
      begin
        @publ_key.public_encrypt(str)
      rescue NoMethodError
        return false
      end
    end

    def decrypt(str)
      begin
        @priv_key.private_decrypt(str)
      rescue NoMethodError
        return false
      end
    end

    def send(str)
      return unless @opt[:remote_path]
      c = crypt(str)
      begin
        Net::HTTP.start(@remote_path.host, @remote_path.port) do |h|
          r = h.post(
            @remote_path.path,
            'public_key=' + CGI.escape(@opt[:public_key]) +
            '&body=' + CGI.escape(Base64.encode64(c)))
        end
      rescue Net::ProtocolError
        return false
      else
        return true
      end
    end

    def recv
      return unless @opt[:remote_path]
      Net::HTTP.start(@remote_path.host, @remote_path.port) do |h|
        r = h.get(
          @remote_path.path + '?public_key=' + CGI.escape(@opt[:public_key]))
        begin; b = r.body.split(/\r?\n/); rescue; return nil; end
        if b.shift.chomp == 'have'
          return decrypt(Base64.decode64(b.join('')))
        else
          return nil
        end
      end
    end
  end

  def initialize(o)
    @opt = {:filetype => :text, :tee => false, :server => false}.merge(o)
    @config = Config.new(
      :remote => false, :private_key => fewdir('key'),
      :public_key => fewdir('key.pub'), :remote_path => nil)
    load_config
    @remote = RemoteHelper.new(
      :remote_path => @config.remote_path,
      :public_key  => File.exist?(@config.public_key ) ? File.read(@config.public_key ) : nil,
      :private_key => File.exist?(@config.private_key) ? File.read(@config.private_key) : nil)
  end

  def load_config
    return if $few_speccing
    config_files =
      %w[_fewrc .fewrc .few.conf few.conf .fewrc.rb _fewrc.rb fewrc.rb]
    config_files.delete_if {|x| !File.exist?(File.expand_path("~") + '/' + x) }
    if config_files.length > 0
      config_file = config_files[0]
      eval File.load(config_file)
    end
    self
  end

  def fewdir(path)
    if $few_speccing
      return __FILE__ + '/../fewfiles/' + path
    else
      config_dirs = %w[few fewfiles]
      config_dirs.delete_if{|x| !File.exist?(File.expand_path("~") + '/' + x)}
      if dirs.length > 0
        dir = config_dirs[0]
        dir+'/'+path
      else; nil
      end
    end
  end

  def generate_remote_key_pair
    @remote.generate_key_pair
    open(@config.public_key ,'w') { |f| f.print @remote.public_key  }
    open(@config.private_key,'w') { |f| f.print @remote.private_key }
    self
  end

  def run
    if @config.remote
        if @opt[:tee]
          b = ''
          ARGF.each do |l|
            print l
            b += l
          end
          a = CGI.escapeHTML b
        else
          a = CGI.escapeHTML ARGF.read.toutf8
        end
        unless @remote.public_key
          STDERR.puts "ERROR: public_key not found.. generate new key pair."
          generate_remote_key_pair
        end
        @remote.send(a)
    else
      t = Tempfile.new('few')

      File.open(t.path, 'w') do |io|
        if @opt[:tee]
          b = ''
          ARGF.each do |l|
            print l
            b += l
          end
          a = CGI.escapeHTML b
        else
          a = CGI.escapeHTML ARGF.read.toutf8
        end
        a = a.gsub(/\r?\n/, "<br />\n")

        a = a.gsub(/.\x08/, '')
        a = a.gsub(/\x1b\[([0-9]*)m/) do
          case $1
          when "","39"
          '</font>'
          when "30"
          '<font color="black">'
          when "31"
          '<font color="red">'
          when "32"
          '<font color="green">'
          when "33"
          '<font color="yellow">'
          when "34"
          '<font color="blue">'
          when "35"
          '<font color="magenta">'
          when "36"
          '<font color="cyan">'
          when "37"
          '<font color="white">'
          else
          ''
          end
        end

        io.puts <<-EOF
<html>
  <head>
    <title>few: #{ARGF.filename} (#{@opt[:filetype].to_s})</title>
    <style type="text/css">
        body {
          white-space: pre;
          line-height: 7px;
          font-size: 12pt;
          font-family: Georgia, "menlo regular", "monaco", "courier", monospace;
        }
    </style>
  </head>
  <body>
        #{a}
  </body>
</html>
    EOF
      end

      t.close

      File.rename(t.path, html = t.path + '.html')

      open_browser(html)
    end
  end

  attr_reader :config
end

def Few(o = {})
  Few.new(o).run
end

case ARGV[0]
when '-h', '--help'
  puts "[USAGE]: few [-h|--help|-v|--version|--selfupdate|--filetype={filetype}|-t|-T|--tee] [filename]"
  puts "[EXAMPLES]: few {filename}"
  puts "            cat {filename} | few"
  puts "            make |& few --tee"
when '-v', '--version'
  puts "0.0.2"
when '--selfupdate'
  require 'open-uri'
  code =
    open('http://github.com/ujihisa/few/raw/master/bin/few') {|io| io.read }
  raise unless /^#!/ =~ code
  File.open(__FILE__, 'w') {|io| io.print code }
  system __FILE__, '-v'
when /--filetype=(\w+)/
  ARGV.shift
  Few(:filetype => $1.to_sym)
when '--tee', '-t', '-T'
  ARGV.shift
  Few(:tee => true, :filetype => :tee)
when '--remote-standing', '-r'
  puts 'Error: Sorry, this feature is not implemented yet.'
when '--daemon', '-d'
  puts 'Error: Sorry, this feature is not implemented yet.'
else
  Few()
end
# vim: set filetype=ruby : set tabstop=2 : set shiftwidth=2
